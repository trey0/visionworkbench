// __BEGIN_LICENSE__
// Copyright (C) 2006-2010 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


package vw.platefile;

// Each entry in the blob file is described by a BlobRecord.  This
// allows us to save and access data and headers with variable
// positioning and length.  BlobRecords are stored in the blob files:
// <platefile>/plate_<#>.blob
message BlobRecord {
  required uint64 header_offset = 1;
  required uint64 header_size = 2;
  required uint64 data_offset = 3;
  required uint64 data_size = 4;
}

// The TileRecord store metadata about the tile itself as well as the
// information needed to place the tile back into the index tree.  The
// [col, row, level, transaction_id] info can be used to reconstruct the index
// by reading TileRecords in the blob files.
message TileHeader {
  required int32 col = 5;
  required int32 row = 6;
  required int32 level = 7;
  optional uint32 transaction_id = 8 [ default = 0 ];
  optional string filetype = 10 [ default = 'jpg' ];
}


// The IndexHeader store basic metadata for the platefile, such as the
// default tile size, file type, and map projection information.
// This is typically stored in the <platfile>/plate.index file.
message IndexHeader {

  // "Public" Metadata
  //
  // You should set these values before passing an IndexHeader along
  // to the Index::construct_create() method.
  //
  optional uint32 tile_size = 2;     // tile width/heigh in pixels
  optional string tile_filetype = 3; // file type [e.g. tif, png, or jpg]
  optional int32 pixel_format = 4;   // see vw/Image/PixelTypeInfo.h
  optional int32 channel_type = 5;   // see vw/Image/PixelTypeInfo.h
  optional string type = 6;          // platefile type [ toast, kml, or gigapan ]
  optional string description = 7;   // textual description
  optional int32 num_levels = 8;     // number of pyramid levels

  // Privately Managed Metadata
  //
  // These values are managed privately be the actual index class. You
  // should never need to set these yourself.
  //
  required int32 platefile_id = 1;   // a unique number that identifies this platefile
  optional int32 version = 10 [default = 1];
  optional uint32 transaction_read_cursor = 11 [default = 1];
  optional uint32 transaction_write_cursor = 12 [default = 1];

}

// The IndexRecord stores basic metadata for locating a tile in a
// blob.  The IndexRecord is used to store this information in a live
// index (in main memory), and can also be stored as part of a
// TileHeader, which is written to the blob file on disk.  Other
// metadata about that tile is stored alongside the tile itself in the
// blobfile in a TileRecord protobufer (see below).
message IndexRecord {
  optional int32 blob_id = 1 [default = -1];
  optional uint64 blob_offset = 2 [default = 0];
  optional string filetype = 3 [default = "default_to_index"];
}

